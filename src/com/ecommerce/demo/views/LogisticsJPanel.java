package com.ecommerce.demo.views;

import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;

import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.JPanel;
import java.awt.CardLayout;
import javax.swing.JOptionPane;

import com.ecommerce.demo.model.Person;
import com.ecommerce.demo.model.Business;
import com.ecommerce.demo.model.RetailerInStockProducts;
import com.ecommerce.demo.controller.ProductController;
import com.ecommerce.demo.controller.ProductController.Product;
import com.ecommerce.demo.model.Order;
import com.ecommerce.demo.controller.OrderController;

public class LogisticsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DeliveryJPanel
     */
    
    private JPanel userProcessContainer;  
    private Business business;
    private String username;
    private OrderController orderDirectory;
    
    public LogisticsJPanel(JPanel userProcessContainer, Business business, String username) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        this.username = username;
        this.orderDirectory = this.business.getOrderDirectory();
        jComboBoxOrderStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Delivery Assigned", "Delivery Picked Up", "Delivery Completed"}));
        jComboBoxOrderStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxOrderStatusItemStateChanged(evt);
            }
        });
        populateAllOrdersTable();
        populateYourOrdersTable();
    }
    
    private void jComboBoxOrderStatusItemStateChanged(java.awt.event.ItemEvent evt) {                                                      
        populateYourOrdersTable();
    }
    
    public void populateYourOrdersTable() {
        DefaultTableModel model = (DefaultTableModel) tblYourOrders.getModel();
        model.setRowCount(0);
        String selectedStatus = (String) jComboBoxOrderStatus.getSelectedItem();
        btnRemoveFromMyQueue.setEnabled(false);
        btnDeliveryPicked.setEnabled(false);
        btnDeliveryCompleted.setEnabled(false);
        for (Order order : orderDirectory.getOrderList()) {
            try {
                if (order.getDeliveryPerson().equals(this.username) && order.getStatus().equals(selectedStatus)) {
                    Object[] row = new Object[5];
                    row[0] = order.getOrderId();
                    row[1] = order.getOrderItemsCount();
                    row[2] = order.getOrderPrice();
                    row[3] = order.getStatus();
                    row[4] = order.getUserName();
                    model.addRow(row);
                    if (selectedStatus.equals("Delivery Assigned")) {
                        btnRemoveFromMyQueue.setEnabled(true);
                        btnDeliveryPicked.setEnabled(true);
                    } else if (selectedStatus.equals("Delivery Picked Up")) {
                        btnDeliveryCompleted.setEnabled(true);
                    } else if (selectedStatus.equals("Delivery Completed")) {
                        
                    }
                }
            } catch(Exception e) {
                System.out.println(e);
            }
        }
    }
    
    
    public void populateAllOrdersTable() {
        DefaultTableModel model = (DefaultTableModel) tblAllOrders.getModel();
        model.setRowCount(0);
        for (Order order : orderDirectory.getOrderList()) {
            if(order.getStatus().equals("Order Placed")) {
                Object[] row = new Object[5];
                row[0] = order.getOrderId();
                row[1] = order.getOrderItemsCount();
                row[2] = order.getOrderPrice();
                row[3] = order.getStatus();
                row[4] = order.getUserName();
                model.addRow(row);
            }
        }
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLogout = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAllOrders = new javax.swing.JTable();
        btnAssignToMyQueue = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblYourOrders = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxOrderStatus = new javax.swing.JComboBox<>();
        btnRemoveFromMyQueue = new javax.swing.JButton();
        btnDeliveryPicked = new javax.swing.JButton();
        btnDeliveryCompleted = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnLogout.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLogout.setText("LOGOUT");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });
        add(btnLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 20, 113, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("LOGISTICS");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 12, 293, 40));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("YOUR ORDERS");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 71, 330, 40));

        tblAllOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Items", "Price", "Status", "Customer Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblAllOrders);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 120, 557, 220));

        btnAssignToMyQueue.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAssignToMyQueue.setText("ASSIGN TO MY QUEUE");
        btnAssignToMyQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignToMyQueueActionPerformed(evt);
            }
        });
        add(btnAssignToMyQueue, new org.netbeans.lib.awtextra.AbsoluteConstraints(383, 360, 180, -1));

        tblYourOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Items", "Price", "Status", "Customer Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblYourOrders);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 120, 550, 220));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("ALL ORDERS");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 77, 549, 31));

        jComboBoxOrderStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(jComboBoxOrderStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 80, 210, -1));

        btnRemoveFromMyQueue.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRemoveFromMyQueue.setText("REMOVE FROM MY QUEUE");
        btnRemoveFromMyQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveFromMyQueueActionPerformed(evt);
            }
        });
        add(btnRemoveFromMyQueue, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 360, 190, -1));

        btnDeliveryPicked.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDeliveryPicked.setText("DELIVERY PICKED");
        btnDeliveryPicked.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeliveryPickedActionPerformed(evt);
            }
        });
        add(btnDeliveryPicked, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 360, 140, -1));

        btnDeliveryCompleted.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDeliveryCompleted.setText("DELIVERY COMPLETED");
        btnDeliveryCompleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeliveryCompletedActionPerformed(evt);
            }
        });
        add(btnDeliveryCompleted, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 360, 180, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignToMyQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignToMyQueueActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblAllOrders.getSelectedRow();
            if (selectedRow >= 0) {
            int orderId = (Integer) tblAllOrders.getValueAt(selectedRow, 0);
            Order orderToAssign = orderDirectory.findByOrderId(orderId);
            if (orderToAssign != null && orderToAssign.getStatus().equals("Order Placed")) {
                orderToAssign.setDeliveryPerson(this.username);
                orderToAssign.setStatus("Delivery Assigned");
                populateAllOrdersTable();
                populateYourOrdersTable();
                JOptionPane.showMessageDialog(this, "Order assigned to your queue successfully.", "Assignment Successful", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Error in assigning the order.", "Assignment Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an order to assign to your queue.", "No Order Selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnAssignToMyQueueActionPerformed

    private void btnRemoveFromMyQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveFromMyQueueActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblYourOrders.getSelectedRow();
        if (selectedRow >= 0) {
            int orderId = (Integer) tblYourOrders.getValueAt(selectedRow, 0);
            Order orderToRemove = orderDirectory.findByOrderId(orderId);
            if (orderToRemove != null && orderToRemove.getDeliveryPerson().equals(this.username)) {
                orderToRemove.setDeliveryPerson(null);
                orderToRemove.setStatus("Order Placed");
                populateYourOrdersTable();
                populateAllOrdersTable();
                JOptionPane.showMessageDialog(this, "Order removed from your queue successfully.", "Removal Successful", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Error in removing the order.", "Removal Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an order to remove from your queue.", "No Order Selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnRemoveFromMyQueueActionPerformed

    private void btnDeliveryPickedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeliveryPickedActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblYourOrders.getSelectedRow();
        if (selectedRow >= 0) {
            int orderId = (Integer) tblYourOrders.getValueAt(selectedRow, 0);
            Order orderToUpdate = orderDirectory.findByOrderId(orderId);
            if (orderToUpdate != null && orderToUpdate.getDeliveryPerson().equals(this.username)) {
                orderToUpdate.setStatus("Delivery Picked Up");
                populateYourOrdersTable();
                JOptionPane.showMessageDialog(this, "Order marked as picked up successfully.", "Picked Up", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Error marking the order as picked up.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an order to mark as picked up.", "No Order Selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeliveryPickedActionPerformed

    private void btnDeliveryCompletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeliveryCompletedActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblYourOrders.getSelectedRow();
        if (selectedRow >= 0) {
            int orderId = (Integer) tblYourOrders.getValueAt(selectedRow, 0);
            Order orderToUpdate = orderDirectory.findByOrderId(orderId);
            if (orderToUpdate != null && orderToUpdate.getDeliveryPerson().equals(this.username)) {
                orderToUpdate.setStatus("Delivery Completed");
                populateYourOrdersTable();
                JOptionPane.showMessageDialog(this, "Order marked as completed successfully.", "Completed", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Error marking the order as completed.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an order to mark as completed.", "No Order Selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeliveryCompletedActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        this.business.setOrderDirectory(this.orderDirectory);
        LoginJPanel panel = new LoginJPanel(userProcessContainer, this.business);
        userProcessContainer.add("LoginJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnLogoutActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignToMyQueue;
    private javax.swing.JButton btnDeliveryCompleted;
    private javax.swing.JButton btnDeliveryPicked;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnRemoveFromMyQueue;
    private javax.swing.JComboBox<String> jComboBoxOrderStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblAllOrders;
    private javax.swing.JTable tblYourOrders;
    // End of variables declaration//GEN-END:variables
}
