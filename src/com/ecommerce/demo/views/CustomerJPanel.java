package com.ecommerce.demo.views;

import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;

import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.JPanel;
import java.awt.CardLayout;
import javax.swing.JOptionPane;

import com.ecommerce.demo.model.Person;
import com.ecommerce.demo.model.Business;
import com.ecommerce.demo.model.RetailerInStockProducts;
import com.ecommerce.demo.controller.ProductController;
import com.ecommerce.demo.controller.ProductController.Product;
import com.ecommerce.demo.model.Order;
import com.ecommerce.demo.controller.OrderController;

public class CustomerJPanel extends javax.swing.JPanel {
    
    /**
     * Creates new form CustomerJPanel
     */
    
    private DefaultTableModel orderTableModel;
    private JPanel userProcessContainer;  
    private Business business;
    private String username;
    private RetailerInStockProducts retailerInStockProducts;
    private ProductController productDirectory;
    private OrderController orderDirectory;
    
    public CustomerJPanel(JPanel userProcessContainer, Business business, String username) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        this.username = username;
        this.retailerInStockProducts = this.business.getRetailerInStockProducts();
        this.productDirectory = this.business.getProductDirectory();
        this.orderDirectory = this.business.getOrderDirectory();
        populateProductComboBox();
        orderTableModel = (DefaultTableModel) tblCreateOrder.getModel();
        jComboBoxOrderStatus.setModel(new DefaultComboBoxModel<>(new String[]{"Order Placed", "Delivery Assigned", "Delivery Picked Up", "Delivery Completed"}));
        jComboBoxOrderStatus.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    populateCustomerOrders();
                }
            }
        });
        populateCustomerOrders();
    }
    
    private void populateProductComboBox() {
        ArrayList<String> productNames = this.productDirectory.getProductNames();
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(productNames.toArray(new String[0]));
        jComboBoxProductList.setModel(model);
    }
    
    private void populateCustomerOrders() {
        DefaultTableModel model = (DefaultTableModel) tblCustomerOrders.getModel();
        model.setRowCount(0);
        String selectedStatus = jComboBoxOrderStatus.getSelectedItem().toString();
        for (Order order : orderDirectory.getOrderList()) {
            if (order.getStatus().equals(selectedStatus) && order.getUserName().equals(this.username)) {
                Object[] row = new Object[5];
                row[0] = order.getOrderId();
                row[1] = order.getOrderItemsCount();
                row[2] = order.getOrderPrice();
                row[3] = order.getStatus();
                row[4] = order.getDeliveryPerson();
                model.addRow(row);
            }
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxProductList = new javax.swing.JComboBox<>();
        jSpinnerProductCount = new javax.swing.JSpinner();
        btnAddToCart = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCreateOrder = new javax.swing.JTable();
        btnClearAll = new javax.swing.JButton();
        btnRemoveItem = new javax.swing.JButton();
        btnSubmit = new javax.swing.JButton();
        txtOrderTotal = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCustomerOrders = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxOrderStatus = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jComboBoxProductList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(jComboBoxProductList, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, 200, -1));
        add(jSpinnerProductCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 70, 90, -1));

        btnAddToCart.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAddToCart.setText("ADD TO CART");
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });
        add(btnAddToCart, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 70, 150, -1));

        tblCreateOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Quantity", "Price Per Unit", "Total Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCreateOrder);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 108, 541, 245));

        btnClearAll.setText("CLEAR ALL");
        btnClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAllActionPerformed(evt);
            }
        });
        add(btnClearAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(38, 359, 120, -1));

        btnRemoveItem.setText("REMOVE ITEM");
        btnRemoveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveItemActionPerformed(evt);
            }
        });
        add(btnRemoveItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 359, 115, -1));

        btnSubmit.setText("SUBMIT");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });
        add(btnSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(311, 359, 115, -1));
        add(txtOrderTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(438, 359, 103, -1));

        tblCustomerOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Items", "Price", "Status", "Delivery Person"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCustomerOrders);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 110, 540, 240));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("YOUR ORDERS");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 66, 330, 30));

        jComboBoxOrderStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(jComboBoxOrderStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(982, 70, 200, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CUSTOMER");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, 260, 40));

        btnLogout.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLogout.setText("LOGOUT");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });
        add(btnLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 20, 110, -1));
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
        // TODO add your handling code here:
        int quantity = (int) jSpinnerProductCount.getValue();
        if (quantity > 0) {
            String selectedProduct = jComboBoxProductList.getSelectedItem().toString();
            ProductController.Product product = productDirectory.findProduct(selectedProduct);
            String pricePerUnit = product.getSellingPrice();
            double totalPrice = Double.parseDouble(pricePerUnit) * quantity;
            boolean productFound = false;
            for (int i = 0; i < orderTableModel.getRowCount(); i++) {
                if (orderTableModel.getValueAt(i, 0).equals(selectedProduct)) {
                    int oldQuantity = (int) orderTableModel.getValueAt(i, 1);
                    double oldTotalPrice = (double) orderTableModel.getValueAt(i, 3);
                    orderTableModel.setValueAt(oldQuantity + quantity, i, 1);
                    orderTableModel.setValueAt(oldTotalPrice + totalPrice, i, 3);
                    productFound = true;
                    break;
                }
            }
            if (!productFound) {
                orderTableModel.addRow(new Object[]{selectedProduct, quantity, pricePerUnit, totalPrice});
            }
            String totalOrderPrice = calculateTotalOrderPrice();
            txtOrderTotal.setText(totalOrderPrice);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a quantity greater than zero.", "Invalid Quantity", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnAddToCartActionPerformed
    
    private void btnClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAllActionPerformed
        // TODO add your handling code here:
        while (orderTableModel.getRowCount() > 0) {
            orderTableModel.removeRow(0);
        }
    }//GEN-LAST:event_btnClearAllActionPerformed
    
    private void btnRemoveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveItemActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblCreateOrder.getSelectedRow();
        if (selectedRow >= 0) {
            orderTableModel.removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Please select an item to remove from the order", "No Item Selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnRemoveItemActionPerformed
    
    private HashMap<String, Integer> getProductAndQuantity() {
        HashMap<String, Integer> productsAndQuantities = new HashMap<>();
        for (int i = 0; i < orderTableModel.getRowCount(); i++) {
            String productName = orderTableModel.getValueAt(i, 0).toString();
            int quantity = Integer.parseInt(orderTableModel.getValueAt(i, 1).toString());
            productsAndQuantities.put(productName, quantity);
        }
        return productsAndQuantities;
    }
    
    
    private String calculateTotalOrderPrice() {
        double totalPrice = 0.0;
        for (int i = 0; i < orderTableModel.getRowCount(); i++) {
            totalPrice += (double) orderTableModel.getValueAt(i, 3);
        }
        return String.valueOf(totalPrice);
    }
    
    
    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        if (tblCreateOrder.getRowCount() > 0) {
            HashMap<String, Integer> orderItems = getProductAndQuantity();
            if (retailerInStockProducts.isOrderPossible(orderItems)) {
                Order newOrder = new Order();
                newOrder.setOrderItems(orderItems);
                newOrder.setStatus("Order Placed");
                newOrder.setUserName(this.username);
                newOrder.setDeliveryPerson("");
                int newOrderId = this.orderDirectory.getOrderList().size() + 1;
                newOrder.setOrderId(newOrderId);
                String totalOrderPrice = calculateTotalOrderPrice();
                newOrder.setOrderPrice(totalOrderPrice);
                retailerInStockProducts.processOrder(orderItems);
                this.orderDirectory.addNewOrder(newOrder);
                while (orderTableModel.getRowCount() > 0) {
                    orderTableModel.removeRow(0);
                }
                txtOrderTotal.setText("");
                populateCustomerOrders();
                System.out.println("Order placed successfully!");
            } else {
                JOptionPane.showMessageDialog(this, "Not enough stock available to place the order.", "Insufficient Stock", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please add at least one item to the order.", "Empty Order", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        this.business.setOrderDirectory(this.orderDirectory);
        this.business.setProductDirectory(this.productDirectory);
        this.business.setRetailerInStockProducts(this.retailerInStockProducts);
        LoginJPanel panel = new LoginJPanel(userProcessContainer, this.business);
        userProcessContainer.add("LoginJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnLogoutActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnClearAll;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnRemoveItem;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox<String> jComboBoxOrderStatus;
    private javax.swing.JComboBox<String> jComboBoxProductList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinnerProductCount;
    private javax.swing.JTable tblCreateOrder;
    private javax.swing.JTable tblCustomerOrders;
    private javax.swing.JTextField txtOrderTotal;
    // End of variables declaration//GEN-END:variables
}
